name: Build
on:
  pull_request:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      vcpkg_export:
        description: 'Create vcpkg export archive'
        type: boolean
        default: false
run-name: ${{ github.event_name == 'pull_request' && github.event.pull_request.title || github.event_name == 'schedule' && 'Daily build' || 'Manual build' }}
permissions:
  packages: write
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, windows-2022, windows-2025, macos-13, macos-14, macos-15]
        triplet: [x64-linux-dynamic, x64-windows, x64-osx-dynamic, arm64-osx-dynamic]
        sanitizer: ["", "asan", "tsan"]
        exclude:
          - os: ubuntu-22.04
            triplet: x64-windows
          - os: ubuntu-22.04
            triplet: x64-osx-dynamic
          - os: ubuntu-22.04
            triplet: arm64-osx-dynamic
          - os: ubuntu-24.04
            triplet: x64-windows
          - os: ubuntu-24.04
            triplet: x64-osx-dynamic
          - os: ubuntu-24.04
            triplet: arm64-osx-dynamic
          - os: windows-2022
            triplet: x64-linux-dynamic
          - os: windows-2022
            triplet: x64-osx-dynamic
          - os: windows-2022
            triplet: arm64-osx-dynamic
          - os: windows-2025
            triplet: x64-linux-dynamic
          - os: windows-2025
            triplet: x64-osx-dynamic
          - os: windows-2025
            triplet: arm64-osx-dynamic
          - os: macos-13
            triplet: x64-linux-dynamic
          - os: macos-13
            triplet: x64-windows
          - os: macos-13
            triplet: arm64-osx-dynamic
          - os: macos-14
            triplet: x64-linux-dynamic
          - os: macos-14
            triplet: x64-windows
          - os: macos-14
            triplet: x64-osx-dynamic
          - os: macos-15
            triplet: x64-linux-dynamic
          - os: macos-15
            triplet: x64-windows
          - os: macos-15
            triplet: x64-osx-dynamic
        include:
          - os: ubuntu-24.04
            triplet: x64-linux-dynamic
            sanitizer: memcheck
          - os: ubuntu-24.04
            triplet: x64-linux-dynamic
            sanitizer: helgrind
          - os: ubuntu-24.04
            triplet: x64-linux-dynamic
            sanitizer: callgrind
    name: ${{ matrix.triplet }}-${{ matrix.os }}${{ matrix.sanitizer != '' && format('-{0}-sanitizer', matrix.sanitizer) || '' }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ (matrix.sanitizer == 'memcheck' || matrix.sanitizer == 'helgrind' || matrix.sanitizer == 'callgrind') && 360 || 300 }}
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Build DocWire SDK
        run: |
          ${{ matrix.os == 'ubuntu-24.04' && 'sudo apt-get install -y mono-complete' || '' }}
          ${{ (matrix.sanitizer == 'memcheck' || matrix.sanitizer == 'helgrind' || matrix.sanitizer == 'callgrind') && 'sudo apt-get update && sudo apt-get install -y valgrind' || '' }}
          ${{ runner.os == 'Linux' && 'sudo apt-get install -y autopoint doxygen autoconf-archive' || '' }}
          ${{ runner.os == 'macOS' && 'brew install --formula md5sha1sum automake autogen doxygen autoconf-archive' || '' }}
          ${{ matrix.os == 'macos-15' && 'brew install --formula mono' || '' }}
          ${{ runner.os == 'Windows' && 'choco install doxygen.install graphviz -y' || '' }}
          ${{ runner.os == 'Windows' && './build.ps1' || './build.sh' }}
        env:
          CREATE_ARCHIVE: "1"
          BINARY_CACHE_GITHUB_USER: "github-actions"
          BINARY_CACHE_GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          BINARY_CACHE_GITHUB_OWNERS: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.repo.owner != github.event.pull_request.base.repo.owner) && format('{0} {1}', github.event.pull_request.base.repo.owner.login, github.event.pull_request.head.repo.owner.login) || github.repository_owner }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FEATURES: ${{ matrix.sanitizer != '' && format('[tests,{0}]', matrix.sanitizer) || '[tests]' }}
          ASAN_OPTIONS: ${{ matrix.sanitizer == 'asan' && 'detect_leaks=0:detect_container_overflow=0' || '' }}
          TSAN_OPTIONS: ${{ matrix.sanitizer == 'tsan' && format('suppressions={0}/tools/thread_sanitizer_suppressions.txt', github.workspace) || '' }}
          DEBUG: ${{ runner.debug }}
      - name: "Run additional tests after installation"
        if: matrix.sanitizer == ''
        working-directory: vcpkg/buildtrees/docwire/${{ matrix.triplet }}-rel
        run: ctest --label-regex is_after_installation_test
      - name: "Upload logs"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-${{ matrix.sanitizer == '' && 'binaries' || format('{0}-sanitizer', matrix.sanitizer) }}-logs
          path: |
            vcpkg/buildtrees/*/*.log
            vcpkg/buildtrees/*/*/*.log
            vcpkg/buildtrees/*/*/*/*.log
            vcpkg/buildtrees/*/*/*/*/*.log
            ${{ matrix.sanitizer == 'callgrind' && 'vcpkg/buildtrees/**/callgrind.out.*' || '' }}
          if-no-files-found: error
      - name: "Export built packages with 'vcpkg export'"
        if: success() && github.event.inputs.vcpkg_export == 'true' && matrix.sanitizer == ''
        run: |
          ./vcpkg/vcpkg export docwire:${{ matrix.triplet }} --output=docwire-vcpkg --raw --output-dir=.
          cmake -E tar czvf docwire-vcpkg-${{ matrix.triplet }}-${{ matrix.os }}-${{ github.sha }}.tar.gz docwire-vcpkg
      - name: "Upload 'vcpkg export' archive"
        uses: actions/upload-artifact@v4
        if: success() && github.event.inputs.vcpkg_export == 'true' && matrix.sanitizer == ''
        with:
          name: ${{ matrix.triplet }}-${{ matrix.os }}-binaries
          path: |
            docwire-vcpkg-${{ matrix.triplet }}-${{ matrix.os }}-${{ github.sha }}.tar.gz
          if-no-files-found: error
