diff --git a/core/fxcodec/jpeg/jpeg_common.c b/core/fxcodec/jpeg/jpeg_common.c
index d2798f6..ea8eb60 100644
--- a/core/fxcodec/jpeg/jpeg_common.c
+++ b/core/fxcodec/jpeg/jpeg_common.c
@@ -87,10 +87,18 @@ void jpeg_common_error_fatal(j_common_ptr cinfo) {
   longjmp(pCommon->jmpbuf, -1);
 }
 
+#define STRINGIFY_HELPER(x) #x
+#define STRINGIFY(x) STRINGIFY_HELPER(x)
+
+#pragma message("BUILDFLAG(IS_WIN) evaluates to: " STRINGIFY(BUILDFLAG(IS_WIN)))
+
 #if BUILDFLAG(IS_WIN)
+#pragma message("Compiling jpeg_common_dest_do_nothing")
 void jpeg_common_dest_do_nothing(j_compress_ptr cinfo) {}
 
 boolean jpeg_common_dest_empty(j_compress_ptr cinfo) {
   return FALSE;
 }
+#else
+#pragma message("Not compiling jpeg_common_dest_do_nothing!")
 #endif  // BUILDFLAG(IS_WIN)
diff --git a/core/fxcrt/byteorder.h b/core/fxcrt/byteorder.h
index af29b6c..30d96df 100644
--- a/core/fxcrt/byteorder.h
+++ b/core/fxcrt/byteorder.h
@@ -18,7 +18,7 @@ namespace internal {
 // TODO(thestig): Once C++23 is available, replace with std::byteswap.
 inline constexpr uint16_t ByteSwap(uint16_t x) {
 #if defined(COMPILER_MSVC) && !defined(__clang__)
-#error "MSVC is not supported."
+  return (x << 8) | (x >> 8);
 #else
   return __builtin_bswap16(x);
 #endif
@@ -26,7 +26,10 @@ inline constexpr uint16_t ByteSwap(uint16_t x) {
 
 inline constexpr uint32_t ByteSwap(uint32_t x) {
 #if defined(COMPILER_MSVC) && !defined(__clang__)
-#error "MSVC is not supported."
+  return (x << 24) |
+    ((x & 0x0000FF00) <<  8) |
+    ((x & 0x00FF0000) >>  8) |
+    (x >> 24);
 #else
   return __builtin_bswap32(x);
 #endif
diff --git a/core/fxcrt/immediate_crash.h b/core/fxcrt/immediate_crash.h
index 490a71c..82ae054 100644
--- a/core/fxcrt/immediate_crash.h
+++ b/core/fxcrt/immediate_crash.h
@@ -103,8 +103,8 @@
 
 #else
 
-#define TRAP_SEQUENCE1_() asm volatile("int3")
-#define TRAP_SEQUENCE2_() asm volatile("ud2")
+#define TRAP_SEQUENCE1_() __debugbreak()
+#define TRAP_SEQUENCE2_() ((void)0)
 
 #endif  // defined(ARCH_CPU_ARM64)
 
